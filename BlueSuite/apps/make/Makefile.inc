#
#  Makefile.inc
#
#  Include this file and it will sort out the values of many variables,
#  and give some basic rules.
#

#  protection rule

first_template_rule:
	@echo "Put a target before including Makefile.inc."

#  include the file for the build configuration you are using - this
#  will set up the variables below for a particular platform, target
#  and compiler.

ifdef HOSTBUILD_OS
CONFIG=$(HOSTBUILD_OS)
endif

ifdef CONFIG
include $(TOP)/make/Makefile_common.unix
include $(TOP)/make/Makefile.$(CONFIG)
endif

# VARIABLES

#  First check that various varables have a value, and exit
#  if they haven't been set already.

ifndef TOP
TOP=/build_run_without_TOP_set
endif

ifndef CPLUS
CPLUS="C++ compiler"
endif

ifndef CC
CC="C compiler"
endif

ifndef CPPROC
CPPROC="C preprocessor"
endif

ifndef CC_WARNING_LEVEL
CC_WARNING_LEVEL="flags to set the compiler warning level"
endif

ifndef MKDIR
MKDIR="make a directory"
endif

ifndef RM
RM="delete a file"
endif

ifndef GREP
GREP="find all lines containing a string, in a list of files"
endif

ifndef GREPNOT
GREPNOT="find all lines not containing a string, in a list of files"
endif

ifndef DIR
DIR="list files in a single column"
endif

ifndef COPY
COPY="copy a file"
endif

ifndef CAT
CAT="print contents of a file"
endif

ifndef LEX
LEX="parses a lex file to a c file"
endif

ifndef BUILD_TARGET
BUILD_TARGET=unknown
endif

ifndef MODULE
MODULE=no_module
endif

ifndef HEADER_SYSTEM
HEADER_SYSTEM=$(MODULE)
endif

#If HOSTBUILD_RESULT hasn't already been set (e.g. hostbuild sets it), then hard-code to the "result" directory. Required for builds that don't use host build.
ifndef HOSTBUILD_RESULT
HOSTBUILD_RESULT=$(TOP)/../result
endif

# Remove backslashes for window builds
RESULT = $(subst \,/,$(HOSTBUILD_RESULT))

#  Second set up useful things based on the variables above.

OUTPUT_DIR = $(RESULT)/$(BUILD_TARGET)
OUTPUT_BIN = $(OUTPUT_DIR)/bin
OUTPUT_LIB = $(OUTPUT_DIR)/lib
OUTPUT_INC = $(RESULT)/include/$(HEADER_SYSTEM)
OUTPUT_INT = $(OUTPUT_DIR)/intermediate/$(MODULE)

BUILD_INCLUDES = -I$(TOP)/interface -I$(TOP)/util -I$(TOP) -I$(RESULT)/include -I$(TOP)/../common -I$(TOP)/spi -I$(RESULT)/include/omnicli -I$(OUTPUT_INC) -I$(TOP)/engine

# useful rules

LOCATED_EXE = $(patsubst %,$(OUTPUT_BIN)/%,$(EXECUTABLE))
LOCATED_EXE_OBJECTS = $(patsubst %,$(OUTPUT_INT)/%,$(EXE_OBJECTS))
LOCATED_EXE_LIBS=$(patsubst %,$(OUTPUT_LIB)/%,$(PLATFORM_MANGLED_EXE_LIB))
MANGLED_IMPORT_LIBS=$(IMPORT_LIBS)

LOCATED_LIB = $(patsubst %,$(OUTPUT_LIB)/%,$(PLATFORM_MANGLED_LIB))
LOCATED_LIB_OBJECTS = $(patsubst %,$(OUTPUT_INT)/%,$(LIB_OBJECTS))

LOCATED_SO = $(patsubst %,$(OUTPUT_BIN)/%,$(SHARED_LIB))
LOCATED_SO_OBJECTS = $(patsubst %,$(OUTPUT_INT)/%,$(SHARED_LIB_OBJECTS))
LOCATED_SO_LIBS=$(patsubst %,$(OUTPUT_LIB)/%,$(PLATFORM_MANGLED_SO_LIB))

.PHONY=build_exe build_lib remove_executables remove_objects remove_libraries output_dirs remove_shared_objects

build_exe: output_dirs $(LOCATED_EXE)

build_lib: output_dirs $(LOCATED_LIB)

build_shared_lib: output_dirs $(LOCATED_SO)

TEST_CALL=$(1)

$(LOCATED_EXE) : $(LOCATED_EXE_OBJECTS) \
                 $(LOCATED_EXE_LIBS) \
                 $(OUTPUT_BIN)
	$(CPLUS) $(LINK_PRE_STUFF) $(EXE_OUT)$@ $(LOCATED_EXE_OBJECTS) $(BUILT_SHARED_OBJECTS) $(LOCATED_EXE_LIBS) $(MANGLED_IMPORT_LIBS) $(TARGET_LIBS) $(LINK_POST_STUFF)

$(LOCATED_LIB) : $(LOCATED_LIB_OBJECTS)
	$(MKDIR) $(OUTPUT_LIB)
	$(PLATFORM_LIBRARY_INCANTATION)

$(LOCATED_SO) : $(LOCATED_SO_OBJECTS) \
                $(LOCATED_SO_LIBS) \
                $(OUTPUT_BIN)
	$(CPLUS) $(SO_LINK_PRE_STUFF) $(SO_OUT)$@ $(LOCATED_SO_OBJECTS) $(LOCATED_SO_LIBS) $(BUILT_SHARED_OBJECTS) $(MANGLED_IMPORT_LIBS) $(LINK_POST_STUFF)

remove_libraries:
	-$(RM) $(LOCATED_LIB)

remove_executables:
	-$(RM) $(LOCATED_EXE)

remove_shared_objects:
	-$(RM) $(LOCATED_SO)

remove_objects:
	-$(RM) $(LOCATED_EXE_OBJECTS) $(LOCATED_LIB_OBJECTS) $(LOCATED_SO_OBJECTS)

test:
	@echo $(CPLUS)=C++ compiler
	@echo $(CC)=C compiler
	@echo $(CPPROC)=C preprocessor
	@echo $(MKDIR)=make a directory
	@echo $(RM)=delete a file
	@echo $(GREP)=find all lines containing a string, in a list of files
	@echo $(GREPNOT)=find all lines not containing a string, in a list of files
	@echo $(DIR)=list files in a single column
	@echo $(COPY)=copy a file
	@echo $(CAT)=print contents of a file
	@echo $(LEX)=parses a lex file to a c file
	@echo "\$$MODULE        = $(MODULE)"
	@echo "\$$HEADER_SYSTEM = $(HEADER_SYSTEM)"
	@echo "\$$EXECUTABLE    = $(EXECUTABLE)"
	@echo "\$$LIBRARY       = $(LIBRARY)"
	@echo "\$$SHARED_LIB    = $(SHARED_LIB)"

output_dirs: $(OUTPUT_INT) $(OUTPUT_BIN) $(OUTPUT_LIB) $(OUTPUT_INC)

$(OUTPUT_INT) $(OUTPUT_BIN) $(OUTPUT_LIB) $(OUTPUT_INC):
	$(MKDIR) $@

#  rules to create object files from autogenerated file

$(OUTPUT_INT)/%$(OBJ) : $(OUTPUT_INT)/%.c
	$(CC) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : $(OUTPUT_INT)/%.cpp
	$(CPLUS) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

#  rules to create object files from source code

$(OUTPUT_INT)/%$(OBJ) : $(PLATFORM_TYPE)/%.c
	$(CC) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : $(PLATFORM_TYPE)/%.cpp
	$(CPLUS) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : $(BUILD_TARGET)/%.c
	$(CC) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : $(BUILD_TARGET)/%.cpp
	$(CPLUS) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : %.c
	$(CC) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

$(OUTPUT_INT)/%$(OBJ) : %.cpp
	$(CPLUS) $(PRE_STUFF) $(MODULE_DEFINES) $(DEBUG_FLAGS) $(TARGET_FLAGS) $(BUILD_INCLUDES) $(INCLUDE_DIRS) $(CC_WARNING_LEVEL) -c $< $(OBJ_OUT)$@

#  rules that should never be used,
#  because the ones above should catch every interesting case.

%.o : %.c
	$(error Failed, making $@ from $^)

%.o : %.cpp
	$(error Failed, making $@ from $^)

%.obj : %.c
	$(error Failed, making $@ from $^)

%.obj : %.cpp
	$(error Failed, making $@ from $^)

